#include<bits/stdc++.h>
using namespace std;

// Returns XOR of 'a' and 'b'
// (both of same length)
string xor1(string a, string b)
{
	
	// Initialize result
	string result = "";
	
	int n = b.length();
	
	// Traverse all bits, if bits are
	// same, then XOR is 0, else 1
	for(int i = 1; i < n; i++)
	{
		if (a[i] == b[i])
			result += "0";
		else
			result += "1";
	}
	return result;
}

// Performs Modulo-2 division
string mod2div(string dividend, string divisor)
{
	
	// Number of bits to be XORed at a time.
	int pick = divisor.length();
	
	// Slicing the dividend to appropriate
	// length for particular step
	string tmp = dividend.substr(0, pick);
	
	int n = dividend.length();
	
	while (pick < n)
	{
		if (tmp[0] == '1')
			tmp = xor1(divisor, tmp) + dividend[pick];
		else
			tmp = xor1(std::string(pick, '0'), tmp) +
				dividend[pick];
		pick += 1;
	}
	if (tmp[0] == '1')
		tmp = xor1(divisor, tmp);
	else
		tmp = xor1(std::string(pick, '0'), tmp);
		
	return tmp;
}

string encodeData(string data, string key)
{
	int l_key = key.length();
	
	string appended_data = (data +
							std::string(
								l_key - 1, '0'));
	
	string remainder = mod2div(appended_data, key);

	string codeword = data + remainder;
	cout << "Remainder : "
		<< remainder << "\n";
	cout << "Encoded Data (Data + Remainder) :"
		<< codeword << "\n";
	return codeword;
}

void receiver(string data, string key)
{
	string currxor = mod2div(data.substr(0, key.size()), key);
	int curr = key.size();
	while (curr != data.size())
	{
		if (currxor.size() != key.size())
		{
			currxor.push_back(data[curr++]);
		}
		else
		{
			currxor = mod2div(currxor, key);
		}
	}
	if (currxor.size() == key.size())
	{
		currxor = mod2div(currxor, key);
	}
	if (currxor.find('1') != string::npos)
	{
		cout << "there is some error in data" << endl;
	}
	else
	{
		cout << "correct message recieved" << endl;
	}
}

int main()
{
    string codeword = "";
	string data = "1011101";
	string key = "10001000000100001";
	
	codeword = encodeData(data, key);
	receiver(codeword + "1", key);
	
	return 0;
}
